IF EXISTS (SELECT 1 FROM dbo.sysobjects WHERE id = object_id (N'[dbo].[GetStatFileMessage]') AND OBJECTPROPERTY(id, N'IsProcedure') = 1) 
BEGIN
	DROP PROCEDURE [dbo].[GetStatFileMessage]
	PRINT 'Dropping Procedure: GetStatFileMessage'
END
	PRINT 'Creating Procedure: GetStatFileMessage'
GO

CREATE PROCEDURE [dbo].[GetStatFileMessage]
(
	@StartDateTime datetime,
	@EndDateTime datetime,
	@WebReportGroupID int,
	@OrganizationID int ,
	@DateTypeID int,
	@ExportFileID int = 0,
	@SeperateFiles bit = 0,
	@CloseCaseTriggerID int = 0,
	@CloseCaseOverride int = 0
)
/******************************************************************************
**		File: GetStatFileMessage.sql
**		Name: GetStatFileMessage
**		Desc:  Used on StatFile
**
**		Called by:  
**              StatFile
**
**		Auth: Bret Knoll
**		Date: 03/02/2009
*******************************************************************************
**		Change History
*******************************************************************************
**		Date:		Author:		Description:
**		--------	--------	-------------------------------------------
**		03/02/2009	Bret Knoll	initial
*******************************************************************************/
AS

/*
This procedure uses 6 steps to generate two dataSets the First DataSet is always generated by Create Date. 
The second dataset is created by lastmodified.	
1. Check the CloseCaseQueue table for any cases where the override time has past or the Trigger has tripped.
2. Build ExportFileQueue
3. Add cases from the ExportFileQueue to the CloseCaseQueue where the CloseCaseTrigger has not tripped
4. Call GetStatFileMessageSelect
5. Clear ExportFileQueue for ExportFileID
6. Clear CloseCaseQueue for ExportFileID and Disabled cases

*/
SET TRANSACTION ISOLATION LEVEL READ UNCOMMITTED 
DECLARE
	@Created bit, 
	@Modified bit,
	@loopMax int,
	@loopCount int
SET @loopCount = 0

print 'step 0'
-- clear the exportFileQue to ensure a fresh start.
		DELETE ExportFileQueue
		WHERE ExportFileID = @ExportFileID

IF(@SeperateFiles = 1)
BEGIN
	SET @loopMax = 2
END
ELSE 
BEGIN
	SET @loopMax = 1
END

-- Run the 	GetStatFileMessageSelect if @SeperateFiles = 0 and @DateTypeID = 1 (lastmodified)
if(@SeperateFiles = 0 AND @DateTypeID = 1 )
BEGIN
	EXEC GetStatFileMessageSelect @ExportFileID, @OrganizationID
END

WHILE (@loopCount < @loopMax)
BEGIN
	-- determine if to query createDate or lastmodified
	IF (@SeperateFiles = 1)-- yes supply two files
	BEGIN
		IF (@loopCount = 0) -- first loop
		BEGIN
			SET @Created = 1
			SET @Modified = 0
		END
		ELSE IF (@loopCount = 1) -- second loop
		BEGIN
			SET @Created = 0
			SET @Modified = 1
		END
		
	END
	ELSE IF(@SeperateFiles = 0) -- no supply one one file
	BEGIN
		IF (@DateTypeID = 0) -- use Created
		BEGIN
			SET @Created = 1
			SET @Modified = 0
		END
		ELSE IF (@DateTypeID = 1) -- use lastmofied
		BEGIN
			SET @Created = 1 
			SET @Modified = 1
		END	
	END

	-- Step 1: 1. Check the CloseCaseQueue table for any cases where the override time has past or the Trigger has tripped.
	/*
		Use dbo.fn_StatFileCloseCaseTriggerDisable(@CloseCaseTriggerID, @ExportFileID) to identify cases where the case has closed based on trigger
		
		User @CloseCaseOverride to flag cases as closed if the override time has past
		
	*/
	-- ONLY RUN ON LOOP 1
	IF (@loopCount = 0)
	BEGIN
		print 'step 1'
		UPDATE 
			CloseCaseQueue
		SET 
			ENABLED = 0
		WHERE 
			(ExportFileID = @ExportFileID)
		AND
			(
			EXISTS (SELECT 1 
					FROM dbo.fn_StatFileCloseCaseTriggerDisable(@CloseCaseTriggerID, @ExportFileID) cctd
					WHERE cctd.CallID = CloseCaseQueue.CallID)
			OR
			DateAdd(n, @CloseCaseOverride, LastModified)  < GetDate()
			)
		AND (@CloseCaseOverride > 0)
	END
	-- Step 2: 2. Build ExportFileQueue
	/*
		use dbo.fn_GetCallIDList

	*/
	print 'step 2'
		INSERT ExportFileQueue
		SELECT 
			fnCallList.CallID, 
			@ExportFileID, 
			1 -- Enabled
		FROM	
			dbo.fn_GetCallIDList (@StartDateTime, @EndDateTime, @Created, @Modified	) fnCallList
		JOIN Message m ON m.CallID = fnCallList.CallID
		WHERE 
			EXISTS (SELECT 1 
					FROM WebReportGroup 
					WHERE 
						WebReportGroup.WebReportGroupID = @WebReportGroupID and 
						OrgHierarchyParentID = m.OrganizationID) AND
			NOT EXISTS (SELECT 1 
						FROM checkCloseCaseQueue
						WHERE ExportFileID = @ExportFileID and checkCloseCaseQueue.CallID = fnCallList.CallID);
		
	-- Step 3:
	/*
		Use dbo.fn_StatFileCloseCaseTrigger(@CloseCaseTriggerID, @ExportFileID) 
		to identify cases where the case has closed based on trigger

	*/
	print 'step 3'
		INSERT 
			CloseCaseQueue
		SELECT  
			CallID,
			GetDate(),
			@ExportFileID,
			1 -- enabled 
		FROM 
			dbo.fn_StatFileCloseCaseTrigger(@CloseCaseTriggerID, @ExportFileID) fnStatFileCloseCaseTrigger
		-- prevent from adding to CloseCaseQueue multiple times
		WHERE NOT EXISTS (SELECT 1 
						FROM CloseCaseQueue
						WHERE ExportFileID = @ExportFileID and CloseCaseQueue.CallID = fnStatFileCloseCaseTrigger.CALLID) AND
			NOT EXISTS (SELECT 1 
						FROM checkCloseCaseQueue
						WHERE ExportFileID = @ExportFileID and checkCloseCaseQueue.CallID = fnStatFileCloseCaseTrigger.CALLID);

		
	-- Step 4:
	print 'step 4'
		EXEC GetStatFileMessageSelect @ExportFileID, @OrganizationID

	-- Step 5:
	print 'step 5'
		DELETE ExportFileQueue
		WHERE ExportFileID = @ExportFileID

	-- Step 6:
	print 'step 6' -- log record in checkCloseCaseQue as sent and remove from CloseCaseQueue
		-- add a step to log CloseCaseQueue
		-- this will only happen if the table exists
		if exists(SELECT 1 from sysobjects where name like 'checkCloseCaseQueue')
		begin 
			INSERT checkCloseCaseQueue
			SELECT
				CallID, LastModified, ExportFileID
			FROM
				closeCaseQueue
			where not exists (select checkCloseCaseQueue.CallID from checkCloseCaseQueue where checkCloseCaseQueue.CallID = closeCaseQueue.CallID and checkCloseCaseQueue.ExportFileID = closeCaseQueue.ExportFileID )
			and ExportFileID = @ExportFileID
			and Enabled = 0;
		end

		DELETE CloseCaseQueue
		WHERE
			ExportFileID = @ExportFileID
		AND 
			Enabled = 0;

	SET @loopCount = @loopCount + 1

END
-- Run the 	GetStatFileMessageSelect if @SeperateFiles = 0 and @DateTypeID = 0 (CreateDate)
if(@SeperateFiles = 0 AND @DateTypeID = 0 )
BEGIN
	EXEC GetStatFileMessageSelect @ExportFileID, @OrganizationID
END
GO