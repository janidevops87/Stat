// The following code was generated by Microsoft Visual Studio 2005.
// The test owner should check each test for validity.
using Microsoft.VisualStudio.TestTools.UnitTesting;
using Moq;
using Statline.StatTrac.Data.Types;
using Statline.StatTrac.StatFile;
using System;
using static Statline.StatTrac.StatFile.DataFactory;

namespace Test
{
    /// <summary>
    ///This is a test class for Statline.StatTrac.StatFile.DataFactory and is intended
    ///to contain all Statline.StatTrac.StatFile.DataFactory Unit Tests
    ///</summary>
    [TestClass()]
    public partial class DataFactoryTest
    {


        private TestContext testContextInstance;

        /// <summary>
        ///Gets or sets the test context which provides
        ///information about and functionality for the current test run.
        ///</summary>
        public TestContext TestContext
        {
            get
            {
                return testContextInstance;
            }
            set
            {
                testContextInstance = value;
            }
        }
        #region Additional test attributes
        // 
        //You can use the following additional attributes as you write your tests:
        //
        //Use ClassInitialize to run code before running the first test in the class
        //
        //[ClassInitialize()]
        //public static void MyClassInitialize(TestContext testContext)
        //{
        //}
        //
        //Use ClassCleanup to run code after all tests in a class have run
        //
        //[ClassCleanup()]
        //public static void MyClassCleanup()
        //{
        //}
        //
        //Use TestInitialize to run code before running each test
        //
        //[TestInitialize()]
        //public void MyTestInitialize()
        //{
        //}
        //
        //Use TestCleanup to run code after each test has run
        //
        //[TestCleanup()]
        //public void MyTestCleanup()
        //{
        //}
        //
        #endregion

        #region CalculateEndDateTimeTest
        /// <summary>
        ///A test for CalculateNextStartDateTime (DateTime)
        ///</summary>
        [DeploymentItem("Statline.StatTrac.dll")]
        [TestMethod()]
        public void CalculateNextStartDateTimeTestMonthly()
        {
            var dataFactoryState = new DataFactoryMockState();

            dataFactoryState.FileFrequency = (int)FileFrequencyType.Monthly;
            dataFactoryState.FileFrequencyQuantity = 1;
            dataFactoryState.FileRunTime = "00:00";
            dataFactoryState.TimeZone = "MT";
            DateTime dt = new DateTime(2009, 1, 1); // TODO: Initialize to an appropriate value

            DateTime expected = dt.AddMonths(1);
            DateTime actual;

            DataFactory dataFactory = CreateDataFactory(dataFactoryState);

            actual = dataFactory.CalculateNextStartDateTime(dt);

            Assert.AreEqual(expected, actual, "Statline.StatTrac.StatFile.DataFactory.CalculateNextStartDateTime did not return " +
             "the expected value.");
        }
        /// <summary>
        ///A test for CalculateNextStartDateTime (DateTime)
        ///</summary>
        [DeploymentItem("Statline.StatTrac.dll")]
        [TestMethod()]
        public void CalculateNextStartDateTimeTestMonthlyET()
        {
            var dataFactoryState = new DataFactoryMockState();

            dataFactoryState.FileFrequency = (int)FileFrequencyType.Monthly;
            dataFactoryState.FileFrequencyQuantity = 1;
            dataFactoryState.FileRunTime = "00:00";
            dataFactoryState.TimeZone = "ET";
            DateTime dt = new DateTime(2009, 1, 1); // TODO: Initialize to an appropriate value

            DateTime expected = dt.AddMonths(1);//.AddHours(-2);
            DateTime actual;

            DataFactory dataFactory = CreateDataFactory(dataFactoryState);

            actual = dataFactory.CalculateNextStartDateTime(dt);

            Assert.AreEqual(expected, actual, "Statline.StatTrac.StatFile.DataFactory.CalculateNextStartDateTime did not return " +
             "the expected value.");
        }

        /// <summary>
        ///A test for CalculateNextStartDateTime by hour
        ///</summary>
        [DeploymentItem("Statline.StatTrac.dll")]
        [TestMethod()]
        public void CalculateNextStartDateTimeTestHour()
        {
            var dataFactoryState = new DataFactoryMockState();


            DateTime dt = new DateTime(2009, 1, 1); // TODO: Initialize to an appropriate value

            dataFactoryState.FileFrequency = (int)FileFrequencyType.Hourly;
            dataFactoryState.FileFrequencyQuantity = 1;
            dataFactoryState.FileRunTime = "00:00";
            dataFactoryState.TimeZone = "MT";

            DateTime expected = dt.AddHours(1);
            DateTime actual;

            DataFactory dataFactory = CreateDataFactory(dataFactoryState);

            actual = dataFactory.CalculateNextStartDateTime(dt);

            Assert.AreEqual(expected, actual, "Statline.StatTrac.StatFile.DataFactory.CalculateNextStartDateTime did not return " +
                    "the expected value.");
        }
        /// <summary>
        ///A test for CalculateNextStartDateTime by hour
        ///</summary>
        [DeploymentItem("Statline.StatTrac.dll")]
        [TestMethod()]
        public void CalculateNextStartDateTimeTestHourET()
        {
            var dataFactoryState = new DataFactoryMockState();


            DateTime dt = new DateTime(2009, 1, 1); // TODO: Initialize to an appropriate value

            dataFactoryState.FileFrequency = (int)FileFrequencyType.Hourly;
            dataFactoryState.FileFrequencyQuantity = 1;
            dataFactoryState.FileRunTime = "00:00";
            dataFactoryState.TimeZone = "ET";

            DateTime expected = dt.AddHours(1);
            DateTime actual;

            DataFactory dataFactory = CreateDataFactory(dataFactoryState);

            actual = dataFactory.CalculateNextStartDateTime(dt);

            Assert.AreEqual(expected, actual, "Statline.StatTrac.StatFile.DataFactory.CalculateNextStartDateTime did not return " +
                    "the expected value.");
        }
        /// <summary>
        ///A test for CalculateNextStartDateTime (DateTime)
        ///</summary>
        [DeploymentItem("Statline.StatTrac.dll")]
        [TestMethod()]
        public void CalculateNextStartDateTimeTestDaily()
        {
            var dataFactoryState = new DataFactoryMockState();


            DateTime dt = new DateTime(2009, 1, 1);

            dataFactoryState.FileFrequency = (int)FileFrequencyType.Daily;
            dataFactoryState.FileFrequencyQuantity = 1;
            dataFactoryState.FileRunTime = "00:00";
            dataFactoryState.TimeZone = "MT";

            DateTime expected = dt.AddDays(1);
            DateTime actual;

            DataFactory dataFactory = CreateDataFactory(dataFactoryState);

            actual = dataFactory.CalculateNextStartDateTime(dt);

            Assert.AreEqual(expected, actual, "Statline.StatTrac.StatFile.DataFactory.CalculateNextStartDateTime did not return " +
                    "the expected value.");
        }
        /// <summary>
        ///A test for CalculateNextStartDateTime (DateTime)
        ///</summary>
        [DeploymentItem("Statline.StatTrac.dll")]
        [TestMethod()]
        public void CalculateNextStartDateTimeTestDailyET()
        {
            var dataFactoryState = new DataFactoryMockState();


            DateTime dt = new DateTime(2009, 1, 1);

            dataFactoryState.FileFrequency = (int)FileFrequencyType.Daily;
            dataFactoryState.FileFrequencyQuantity = 1;
            dataFactoryState.FileRunTime = "00:00";
            dataFactoryState.TimeZone = "ET";

            DateTime expected = dt.AddDays(1);//.AddHours(-2);
            DateTime actual;

            DataFactory dataFactory = CreateDataFactory(dataFactoryState);

            actual = dataFactory.CalculateNextStartDateTime(dt);

            Assert.AreEqual(expected, actual, "Statline.StatTrac.StatFile.DataFactory.CalculateNextStartDateTime did not return " +
                    "the expected value.");
        }

        /// <summary>
        ///A test for CalculateNextStartDateTime (DateTime) by Minute
        ///</summary>
        [DeploymentItem("Statline.StatTrac.dll")]
        [TestMethod()]
        public void CalculateNextStartDateTimeTestMinute()
        {
            var dataFactoryState = new DataFactoryMockState();


            DateTime dt = new DateTime(2009, 1, 1);

            dataFactoryState.FileFrequency = (int)FileFrequencyType.Minute;
            dataFactoryState.FileFrequencyQuantity = 1;
            dataFactoryState.FileRunTime = "00:00";
            dataFactoryState.TimeZone = "MT";

            DateTime expected = dt.AddMinutes(1);
            DateTime actual;

            DataFactory dataFactory = CreateDataFactory(dataFactoryState);

            actual = dataFactory.CalculateNextStartDateTime(dt);

            Assert.AreEqual(expected, actual, "Statline.StatTrac.StatFile.DataFactory.CalculateNextStartDateTime did not return " +
                    "the expected value.");
        }
        /// <summary>
        ///A test for CalculateNextStartDateTime (DateTime) by Minute
        ///</summary>
        [DeploymentItem("Statline.StatTrac.dll")]
        [TestMethod()]
        public void CalculateNextStartDateTimeTestMinuteET()
        {
            var dataFactoryState = new DataFactoryMockState();


            DateTime dt = new DateTime(2009, 1, 1);

            dataFactoryState.FileFrequency = (int)FileFrequencyType.Minute;
            dataFactoryState.FileFrequencyQuantity = 1;
            dataFactoryState.FileRunTime = "00:00";
            dataFactoryState.TimeZone = "ET";

            DateTime expected = dt.AddMinutes(1);//.AddHours(-2);
            DateTime actual;

            DataFactory dataFactory = CreateDataFactory(dataFactoryState);

            actual = dataFactory.CalculateNextStartDateTime(dt);

            Assert.AreEqual(expected, actual, "Statline.StatTrac.StatFile.DataFactory.CalculateNextStartDateTime did not return " +
                    "the expected value.");
        }

        /// <summary>
        ///A test for CalculateNextStartDateTime (DateTime) by week
        ///</summary>
        [DeploymentItem("Statline.StatTrac.dll")]
        [TestMethod()]
        public void CalculateNextStartDateTimeTestWeekly()
        {
            var dataFactoryState = new DataFactoryMockState();


            DateTime dt = new DateTime(2009, 3, 30);

            dataFactoryState.FileFrequency = (int)FileFrequencyType.Weekly;
            dataFactoryState.FileFrequencyQuantity = 1;
            dataFactoryState.FileRunTime = "00:00";
            dataFactoryState.TimeZone = "ET";

            DateTime expected = dt.AddDays(7);//.AddHours(-2);
            DateTime actual;

            DataFactory dataFactory = CreateDataFactory(dataFactoryState);

            actual = dataFactory.CalculateNextStartDateTime(dt);

            Assert.AreEqual(expected, actual, "Statline.StatTrac.StatFile.DataFactory.CalculateNextStartDateTime did not return " +
                    "the expected value.");
        }
        /// <summary>
        ///A test for CalculateNextStartDateTime (DateTime) by week
        ///</summary>
        [DeploymentItem("Statline.StatTrac.dll")]
        [TestMethod()]
        public void CalculateNextStartDateTimeTestWeeklyET()
        {
            var dataFactoryState = new DataFactoryMockState();


            DateTime dt = new DateTime(2009, 3, 30);

            dataFactoryState.FileFrequency = (int)FileFrequencyType.Weekly;
            dataFactoryState.FileFrequencyQuantity = 1;
            dataFactoryState.FileRunTime = "00:00";
            dataFactoryState.TimeZone = "ET";

            DateTime expected = dt.AddDays(7);//.AddHours(-2);
            DateTime actual;

            DataFactory dataFactory = CreateDataFactory(dataFactoryState);

            actual = dataFactory.CalculateNextStartDateTime(dt);

            Assert.AreEqual(expected, actual, "Statline.StatTrac.StatFile.DataFactory.CalculateNextStartDateTime did not return " +
                    "the expected value.");
        }

        /// <summary>
        ///A test for CalculateNextStartDateTime (DateTime)
        ///</summary>
        [DeploymentItem("Statline.StatTrac.dll")]
        [TestMethod()]
        public void CalculateNextStartDateTimeTestTimeOffSet()
        {
            var dataFactoryState = new DataFactoryMockState();


            DateTime dt = new DateTime(2009, 1, 1);

            dataFactoryState.FileFrequency = (int)FileFrequencyType.Daily;
            dataFactoryState.FileFrequencyQuantity = 1;
            dataFactoryState.FileRunTime = "06:00";
            dataFactoryState.TimeZone = "MT";

            DateTime expected = dt.AddDays(1);
            expected = new DateTime(expected.Year, expected.Month, expected.Day, 06, 0, 0);
            DateTime actual;

            DataFactory dataFactory = CreateDataFactory(dataFactoryState);

            actual = dataFactory.CalculateNextStartDateTime(dt);

            Assert.AreEqual(expected, actual, "Statline.StatTrac.StatFile.DataFactory.CalculateNextStartDateTime did not return " +
                    "the expected value.");
        }
        /// <summary>
        ///A test for CalculateNextStartDateTime (DateTime)
        ///</summary>
        [DeploymentItem("Statline.StatTrac.dll")]
        [TestMethod()]
        public void CalculateNextStartDateTimeTestTimeOffSetET()
        {
            var dataFactoryState = new DataFactoryMockState();


            DateTime dt = new DateTime(2009, 1, 1);

            dataFactoryState.FileFrequency = (int)FileFrequencyType.Daily;
            dataFactoryState.FileFrequencyQuantity = 1;
            dataFactoryState.FileRunTime = "06:00";
            dataFactoryState.TimeZone = "ET";

            DateTime expected = dt.AddDays(1);
            expected = new DateTime(expected.Year, expected.Month, expected.Day, 06, 0, 0);//.AddHours(-2);
            DateTime actual;

            DataFactory dataFactory = CreateDataFactory(dataFactoryState);

            actual = dataFactory.CalculateNextStartDateTime(dt);

            Assert.AreEqual(expected, actual, "Statline.StatTrac.StatFile.DataFactory.CalculateNextStartDateTime did not return " +
                    "the expected value.");
        }

        /// <summary>
        ///A test to Calculate EndDateTime Monthly
        ///</summary>
        [DeploymentItem("Statline.StatTrac.dll")]
        [TestMethod()]
        public void CalculateEndDateTimeTestMonth()
        {
            var dataFactoryState = new DataFactoryMockState();


            DateTime dt = new DateTime(2009, 1, 1); // TODO: Initialize to an appropriate value

            dataFactoryState.LastStartDateTime = dt;
            dataFactoryState.LastEndDateTime = dt.AddMonths(1).AddSeconds(-1);
            dataFactoryState.FileFrequency = (int)FileFrequencyType.Monthly;
            dataFactoryState.FileFrequencyQuantity = 1;
            dataFactoryState.FileRunTime = "00:00";
            dataFactoryState.TimeZone = "MT";


            DateTime expected = dt.AddMonths(2).AddSeconds(-1);
            DateTime actual;

            DataFactory dataFactory = CreateDataFactory(dataFactoryState);

            actual = dataFactory.EndDateTime;

            Assert.AreEqual(expected, actual, "Statline.StatTrac.StatFile.DataFactory.CalculateNextStartDateTime did not return " +
                    "the expected value.");
        }
        /// <summary>
        ///A test to Calculate EndDateTime Monthly
        ///</summary>
        [DeploymentItem("Statline.StatTrac.dll")]
        [TestMethod()]
        public void CalculateEndDateTimeTestMonthET()
        {
            var dataFactoryState = new DataFactoryMockState();


            DateTime dt = new DateTime(2009, 1, 1); // TODO: Initialize to an appropriate value

            dataFactoryState.LastStartDateTime = dt;
            dataFactoryState.LastEndDateTime = dt.AddMonths(1).AddSeconds(-1);
            dataFactoryState.FileFrequency = (int)FileFrequencyType.Monthly;
            dataFactoryState.FileFrequencyQuantity = 1;
            dataFactoryState.FileRunTime = "00:00";
            dataFactoryState.TimeZone = "ET";


            DateTime expected = dt.AddMonths(2).AddSeconds(-1);//.AddHours(-2);
            DateTime actual;

            DataFactory dataFactory = CreateDataFactory(dataFactoryState);

            actual = dataFactory.EndDateTime;

            Assert.AreEqual(expected, actual, "Statline.StatTrac.StatFile.DataFactory.CalculateNextStartDateTime did not return " +
                    "the expected value.");
        }
        #endregion
        #region ConvertToMountain
        /// <summary>
        ///A test to ConvertDateTimeToMountainTimeZoneET
        ///</summary>
        [DeploymentItem("Statline.StatTrac.dll")]
        [TestMethod()]
        public void ConvertDateTimeToMountainTimeZoneET()
        {
            var dataFactoryState = new DataFactoryMockState();


            DateTime dt = new DateTime(2009, 1, 1); // TODO: Initialize to an appropriate value

            dataFactoryState.TimeZone = "ET";

            DateTime expected = dt.AddHours(-2);
            DateTime actual;

            DataFactory dataFactory = CreateDataFactory(dataFactoryState);

            actual = dataFactory.ConvertDateTimeToMountainTimeZone(dt);

            Assert.AreEqual(expected, actual, "Statline.StatTrac.StatFile.DataFactory.CalculateNextStartDateTime did not return " +
                    "the expected value.");
        }

        /// <summary>
        ///A test to ConvertDateTimeToMountainTimeZoneET
        ///</summary>
        [DeploymentItem("Statline.StatTrac.dll")]
        [TestMethod()]
        public void ConvertDateTimeToMountainTimeZoneCT()
        {
            var dataFactoryState = new DataFactoryMockState();


            DateTime dt = new DateTime(2009, 1, 1); // TODO: Initialize to an appropriate value

            dataFactoryState.TimeZone = "CT";

            DateTime expected = dt.AddHours(-1);
            DateTime actual;

            DataFactory dataFactory = CreateDataFactory(dataFactoryState);

            actual = dataFactory.ConvertDateTimeToMountainTimeZone(dt);

            Assert.AreEqual(expected, actual, "Statline.StatTrac.StatFile.DataFactory.CalculateNextStartDateTime did not return " +
                    "the expected value.");
        }
        /// <summary>
        ///A test to ConvertDateTimeToMountainTimeZoneET
        ///</summary>
        [DeploymentItem("Statline.StatTrac.dll")]
        [TestMethod()]
        public void ConvertDateTimeToMountainTimeZoneMT()
        {
            var dataFactoryState = new DataFactoryMockState();


            DateTime dt = new DateTime(2009, 1, 1); // TODO: Initialize to an appropriate value

            dataFactoryState.TimeZone = "MT";

            DateTime expected = dt.AddHours(0);
            DateTime actual;

            DataFactory dataFactory = CreateDataFactory(dataFactoryState);

            actual = dataFactory.ConvertDateTimeToMountainTimeZone(dt);

            Assert.AreEqual(expected, actual, "Statline.StatTrac.StatFile.DataFactory.CalculateNextStartDateTime did not return " +
                    "the expected value.");
        }
        /// <summary>
        ///A test to ConvertDateTimeToMountainTimeZoneET
        ///</summary>
        [DeploymentItem("Statline.StatTrac.dll")]
        [TestMethod()]
        public void ConvertDateTimeToMountainTimeZonePT()
        {
            var dataFactoryState = new DataFactoryMockState();


            DateTime dt = new DateTime(2009, 1, 1); // TODO: Initialize to an appropriate value

            dataFactoryState.TimeZone = "PT";

            DateTime expected = dt.AddHours(1);
            DateTime actual;

            DataFactory dataFactory = CreateDataFactory(dataFactoryState);

            actual = dataFactory.ConvertDateTimeToMountainTimeZone(dt);

            Assert.AreEqual(expected, actual, "Statline.StatTrac.StatFile.DataFactory.CalculateNextStartDateTime did not return " +
                    "the expected value.");
        }
        #endregion

        #region isRunnable

        /// <summary>
        ///A test for CalculateNextStartDateTime (DateTime)
        ///</summary>
        [DeploymentItem("Statline.StatTrac.dll")]
        [TestMethod()]
        public void IsRunnableTestCurrentMonthMT()
        {
            var dataFactoryState = new DataFactoryMockState();

            dataFactoryState.FileFrequency = (int)FileFrequencyType.Monthly;
            dataFactoryState.FileFrequencyQuantity = 1;
            dataFactoryState.FileRunTime = "00:00";
            dataFactoryState.TimeZone = "MT";
            DateTime dt = DateTime.Now; // TODO: Initialize to an appropriate value

            dataFactoryState.LastStartDateTime = new DateTime(dt.Year, dt.Month, 1);
            dataFactoryState.LastEndDateTime = dataFactoryState.LastStartDateTime.AddMonths(1).AddSeconds(-1);

            bool expected = false;
            bool actual;

            DataFactory dataFactory = CreateDataFactory(dataFactoryState);

            actual = dataFactory.IsRunnable();

            Assert.AreEqual(expected, actual, "Statline.StatTrac.StatFile.DataFactory.IsRunnable did not return " +
             "the expected value.");
        }

        /// <summary>
        ///A test for CalculateNextStartDateTime (DateTime)
        ///</summary>
        [DeploymentItem("Statline.StatTrac.dll")]
        [TestMethod()]
        public void IsRunnableTestCurrentMonthET()
        {
            var dataFactoryState = new DataFactoryMockState();

            dataFactoryState.FileFrequency = (int)FileFrequencyType.Monthly;
            dataFactoryState.FileFrequencyQuantity = 1;
            dataFactoryState.FileRunTime = "00:00";
            dataFactoryState.TimeZone = "ET";
            DateTime dt = DateTime.Now; // TODO: Initialize to an appropriate value

            dataFactoryState.LastStartDateTime = new DateTime(dt.Year, dt.Month, 1);
            dataFactoryState.LastEndDateTime = dataFactoryState.LastStartDateTime.AddMonths(1).AddSeconds(-1);

            bool expected = false;
            bool actual;

            DataFactory dataFactory = CreateDataFactory(dataFactoryState);

            actual = dataFactory.IsRunnable();

            Assert.AreEqual(expected, actual, "Statline.StatTrac.StatFile.DataFactory.IsRunnable did not return " +
             "the expected value.");
        }

        /// <summary>
        ///A test for CalculateNextStartDateTime (DateTime)
        ///</summary>
        [DeploymentItem("Statline.StatTrac.dll")]
        [TestMethod()]
        public void IsRunnableTestCurrentMonthCT()
        {
            var dataFactoryState = new DataFactoryMockState();

            dataFactoryState.FileFrequency = (int)FileFrequencyType.Monthly;
            dataFactoryState.FileFrequencyQuantity = 1;
            dataFactoryState.FileRunTime = "00:00";
            dataFactoryState.TimeZone = "CT";
            DateTime dt = DateTime.Now; // TODO: Initialize to an appropriate value

            dataFactoryState.LastStartDateTime = new DateTime(dt.Year, dt.Month, 1);
            dataFactoryState.LastEndDateTime = dataFactoryState.LastStartDateTime.AddMonths(1).AddSeconds(-1);

            bool expected = false;
            bool actual;

            DataFactory dataFactory = CreateDataFactory(dataFactoryState);

            actual = dataFactory.IsRunnable();

            Assert.AreEqual(expected, actual, "Statline.StatTrac.StatFile.DataFactory.IsRunnable did not return " +
             "the expected value.");
        }
        /// <summary>
        ///A test for CalculateNextStartDateTime (DateTime)
        ///</summary>
        [DeploymentItem("Statline.StatTrac.dll")]
        [TestMethod()]
        public void IsRunnableTestCurrentMonthPT()
        {
            var dataFactoryState = new DataFactoryMockState();

            dataFactoryState.FileFrequency = (int)FileFrequencyType.Monthly;
            dataFactoryState.FileFrequencyQuantity = 1;
            dataFactoryState.FileRunTime = "00:00";
            dataFactoryState.TimeZone = "PT";
            DateTime dt = DateTime.Now; // TODO: Initialize to an appropriate value

            dataFactoryState.LastStartDateTime = new DateTime(dt.Year, dt.Month, 1);
            dataFactoryState.LastEndDateTime = dataFactoryState.LastStartDateTime.AddMonths(1).AddSeconds(-1);

            bool expected = false;
            bool actual;

            DataFactory dataFactory = CreateDataFactory(dataFactoryState);

            actual = dataFactory.IsRunnable();

            Assert.AreEqual(expected, actual, "Statline.StatTrac.StatFile.DataFactory.IsRunnable did not return " +
             "the expected value.");
        }

        //PreviousMonth
        /// <summary>
        ///A test for CalculateNextStartDateTime (DateTime)
        ///</summary>
        [DeploymentItem("Statline.StatTrac.dll")]
        [TestMethod()]
        public void IsRunnableTestPreviousMonthMT()
        {
            var dataFactoryState = new DataFactoryMockState();

            dataFactoryState.FileFrequency = (int)FileFrequencyType.Monthly;
            dataFactoryState.FileFrequencyQuantity = 1;
            dataFactoryState.FileRunTime = "00:00";
            dataFactoryState.TimeZone = "MT";
            DateTime dt = DateTime.Now.AddMonths(-2); // TODO: Initialize to an appropriate value

            dataFactoryState.LastStartDateTime = new DateTime(dt.Year, dt.Month, 1);
            dataFactoryState.LastEndDateTime = dataFactoryState.LastStartDateTime.AddMonths(1).AddSeconds(-1);

            bool expected = true;
            bool actual;

            DataFactory dataFactory = CreateDataFactory(dataFactoryState);

            actual = dataFactory.IsRunnable();

            Assert.AreEqual(expected, actual, "Statline.StatTrac.StatFile.DataFactory.IsRunnable did not return " +
             "the expected value.");
        }

        /// <summary>
        ///A test for CalculateNextStartDateTime (DateTime)
        ///</summary>
        [DeploymentItem("Statline.StatTrac.dll")]
        [TestMethod()]
        public void IsRunnableTestPreviousMonthET()
        {
            var dataFactoryState = new DataFactoryMockState();

            dataFactoryState.FileFrequency = (int)FileFrequencyType.Monthly;
            dataFactoryState.FileFrequencyQuantity = 1;
            dataFactoryState.FileRunTime = "00:00";
            dataFactoryState.TimeZone = "ET";
            DateTime dt = DateTime.Now.AddMonths(-2); // TODO: Initialize to an appropriate value

            dataFactoryState.LastStartDateTime = new DateTime(dt.Year, dt.Month, 1);
            dataFactoryState.LastEndDateTime = dataFactoryState.LastStartDateTime.AddMonths(1).AddSeconds(-1);

            bool expected = true;
            bool actual;

            DataFactory dataFactory = CreateDataFactory(dataFactoryState);

            actual = dataFactory.IsRunnable();

            Assert.AreEqual(expected, actual, "Statline.StatTrac.StatFile.DataFactory.IsRunnable did not return " +
             "the expected value.");
        }

        /// <summary>
        ///A test for CalculateNextStartDateTime (DateTime)
        ///</summary>
        [DeploymentItem("Statline.StatTrac.dll")]
        [TestMethod()]
        public void IsRunnableTestPreviousMonthCT()
        {
            var dataFactoryState = new DataFactoryMockState();

            dataFactoryState.FileFrequency = (int)FileFrequencyType.Monthly;
            dataFactoryState.FileFrequencyQuantity = 1;
            dataFactoryState.FileRunTime = "00:00";
            dataFactoryState.TimeZone = "CT";
            DateTime dt = DateTime.Now.AddMonths(-2); // TODO: Initialize to an appropriate value

            dataFactoryState.LastStartDateTime = new DateTime(dt.Year, dt.Month, 1);
            dataFactoryState.LastEndDateTime = dataFactoryState.LastStartDateTime.AddMonths(1).AddSeconds(-1);


            bool expected = true;
            bool actual;

            DataFactory dataFactory = CreateDataFactory(dataFactoryState);

            actual = dataFactory.IsRunnable();

            Assert.AreEqual(expected, actual, "Statline.StatTrac.StatFile.DataFactory.IsRunnable did not return " +
             "the expected value.");
        }
        /// <summary>
        ///A test for CalculateNextStartDateTime (DateTime)
        ///</summary>
        [DeploymentItem("Statline.StatTrac.dll")]
        [TestMethod()]
        public void IsRunnableTestPreviousMonthPT()
        {
            var dataFactoryState = new DataFactoryMockState();

            dataFactoryState.FileFrequency = (int)FileFrequencyType.Monthly;
            dataFactoryState.FileFrequencyQuantity = 1;
            dataFactoryState.FileRunTime = "00:00";
            dataFactoryState.TimeZone = "PT";
            DateTime dt = DateTime.Now.AddMonths(-2); // TODO: Initialize to an appropriate value

            dataFactoryState.LastStartDateTime = new DateTime(dt.Year, dt.Month, 1);
            dataFactoryState.LastEndDateTime = dataFactoryState.LastStartDateTime.AddMonths(1).AddSeconds(-1);


            bool expected = true;
            bool actual;

            DataFactory dataFactory = CreateDataFactory(dataFactoryState);

            actual = dataFactory.IsRunnable();

            Assert.AreEqual(expected, actual, "Statline.StatTrac.StatFile.DataFactory.IsRunnable did not return " +
             "the expected value.");
        }

        [DeploymentItem("Statline.StatTrac.dll")]
        [TestMethod()]
        public void IsRunnableTestCurrentMinutePT_ShouldNotRun()
        {
            var dataFactoryState = new DataFactoryMockState();

            dataFactoryState.FileFrequency = (int)FileFrequencyType.Minute;
            dataFactoryState.FileFrequencyQuantity = 1;
            dataFactoryState.FileRunTime = "00:00";
            dataFactoryState.TimeZone = "PT";

            var pacificTimeZone = TimeZoneInfo.FindSystemTimeZoneById("Pacific Standard Time");
            
            DateTime currentPacificTime = 
                TimeZoneInfo.ConvertTimeFromUtc(DateTime.UtcNow, pacificTimeZone);

            // The end date is ahead of current time.
            dataFactoryState.LastStartDateTime = currentPacificTime;
            dataFactoryState.LastEndDateTime = dataFactoryState.LastStartDateTime.AddMinutes(1).AddSeconds(-1);

            bool expected = false;
            bool actual;

            DataFactory dataFactory = CreateDataFactory(dataFactoryState);

            actual = dataFactory.IsRunnable();

            Assert.AreEqual(
                expected, 
                actual, 
                $"{nameof(DataFactory)}.{nameof(DataFactory.IsRunnable)} " +
                $"did not return the expected value.");
        }

        [DeploymentItem("Statline.StatTrac.dll")]
        [TestMethod()]
        public void IsRunnableTestPastMinutePT_ShouldRun()
        {
            var dataFactoryState = new DataFactoryMockState();

            dataFactoryState.FileFrequency = (int)FileFrequencyType.Minute;
            dataFactoryState.FileFrequencyQuantity = 1;
            dataFactoryState.FileRunTime = "00:00";
            dataFactoryState.TimeZone = "PT";

            var pacificTimeZone = TimeZoneInfo.FindSystemTimeZoneById("Pacific Standard Time");

            // Set the last time a bit behind of current time.
            DateTime currentPacificTime =
                TimeZoneInfo.ConvertTimeFromUtc(DateTime.UtcNow, pacificTimeZone)
                .AddMinutes(-5);

            // The end date is behind of current time.
            dataFactoryState.LastStartDateTime = currentPacificTime;
            dataFactoryState.LastEndDateTime = dataFactoryState.LastStartDateTime.AddMinutes(1).AddSeconds(-1);

            bool expected = true;
            bool actual;

            DataFactory dataFactory = CreateDataFactory(dataFactoryState);

            actual = dataFactory.IsRunnable();

            Assert.AreEqual(
                expected,
                actual,
                $"{nameof(DataFactory)}.{nameof(DataFactory.IsRunnable)} " +
                $"did not return the expected value.");
        }
        #endregion

        #region fileNameDateFormat

        /// <summary>
        ///A test for fileNameDateFormat (DateTime)
        ///</summary>
        [DeploymentItem("Statline.StatTrac.dll")]
        [TestMethod()]
        public void fileNameDateFormatTest()
        {
            DateTime dt = new DateTime(2008, 12, 31, 23, 59, 59); // TODO: Initialize to an appropriate value

            string expected = "0812312359";
            string actual;

            actual = DataFactory.FileNameDateFormat(dt);
            
            Assert.AreEqual(expected, actual, "Statline.StatTrac.StatFile.DataFactory.fileNameDateFormat did not return the expe" +
                    "cted value.");
        }

        #endregion

        private static DataFactory CreateDataFactory(DataFactoryMockState state)
        {
            var fileOutputMock = new Mock<IFileOutput>();
            var xslTransformProviderMock = new Mock<IXslTransformProvider>();

            return new DataFactoryMock(
                state, 
                fileOutputMock.Object, 
                xslTransformProviderMock.Object);
        }
    }
}
